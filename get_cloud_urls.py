#!/usr/bin/env python
"""
Script padr√£o para recuperar URLs de qualquer pasta do Cloudinary

Uso:
    python get_cloud_urls.py

O script ir√° pedir:
    1. Caminho da pasta no Cloudinary (ex: cs/gloves, cs/ak-47)
    2. T√≠tulo para o arquivo de sa√≠da (ex: gloves, ak47)

Sa√≠da:
    cloudinary_urls/{titulo}_urls.json
"""

import os
import json
import sys
from pathlib import Path

try:
    import cloudinary
    import cloudinary.api
except ImportError:
    print("‚ùå Erro: Biblioteca 'cloudinary' n√£o est√° instalada!")
    print()
    print("Para instalar:")
    print("   pip install cloudinary")
    print("   # ou")
    print("   uv add cloudinary")
    sys.exit(1)


# ========== CONFIGURA√á√ÉO ==========
# Credenciais do Cloudinary
CLOUD_NAME = os.environ.get('CLOUDINARY_CLOUD_NAME', 'dwm53cbu2')
API_KEY = os.environ.get('CLOUDINARY_API_KEY', '429396283651242')
API_SECRET = os.environ.get('CLOUDINARY_API_SECRET', 'HTF--7Ceic5mmOo_oxboCTzXiis')

# Pasta de sa√≠da
OUTPUT_DIR = 'cloudinary_urls'

# Tipo de recurso: 'image', 'video', 'raw'
RESOURCE_TYPE = 'image'
# ===================================


def configure_cloudinary():
    """Configura as credenciais do Cloudinary"""
    cloudinary.config(
        cloud_name=CLOUD_NAME,
        api_key=API_KEY,
        api_secret=API_SECRET,
        secure=True
    )
    print(f"‚úÖ Conectado ao Cloudinary: {CLOUD_NAME}")


def get_all_resources(folder, resource_type='image', max_results=None):
    """
    Recupera todos os recursos de uma pasta no Cloudinary usando asset_folder

    Args:
        folder: Nome da pasta (asset folder)
        resource_type: Tipo de recurso ('image', 'video', 'raw')
        max_results: N√∫mero m√°ximo de resultados (None = todos)

    Returns:
        list: Lista de recursos
    """
    all_resources = []
    next_cursor = None

    print(f"üîç Buscando recursos no Cloudinary...")
    print(f"üìÇ Asset Folder: {folder}")
    print(f"üìÇ Tipo: {resource_type}")
    print()

    while True:
        try:
            # Buscar recursos por asset_folder com pagina√ß√£o
            params = {
                'max_results': 500  # M√°ximo por p√°gina
            }

            if next_cursor:
                params['next_cursor'] = next_cursor

            # Usar resources_by_asset_folder para buscar na pasta do Media Library
            if folder:
                response = cloudinary.api.resources_by_asset_folder(
                    folder,
                    **params
                )
            else:
                # Fallback para resources normal se folder estiver vazio
                params['type'] = 'upload'
                response = cloudinary.api.resources(
                    resource_type=resource_type,
                    **params
                )

            resources = response.get('resources', [])
            all_resources.extend(resources)

            print(f"   üì• {len(resources)} recursos encontrados (total: {len(all_resources)})")

            # Verificar se h√° mais p√°ginas
            next_cursor = response.get('next_cursor')

            if not next_cursor:
                break

            if max_results and len(all_resources) >= max_results:
                all_resources = all_resources[:max_results]
                break

        except cloudinary.exceptions.Error as e:
            print(f"‚ùå Erro ao buscar recursos: {e}")
            break

    return all_resources


def build_url(resource, transformations=None):
    """
    Constr√≥i a URL do recurso com transforma√ß√µes opcionais

    Args:
        resource: Dicion√°rio com dados do recurso
        transformations: Dicion√°rio com transforma√ß√µes (opcional)

    Returns:
        str: URL completa
    """
    if transformations:
        # Construir URL com transforma√ß√µes
        return cloudinary.CloudinaryImage(resource['public_id']).build_url(
            **transformations
        )
    else:
        # URL simples
        return resource.get('secure_url', resource.get('url'))


def format_json_output(resources, transformations=None):
    """
    Formata a sa√≠da dos recursos em JSON

    Args:
        resources: Lista de recursos
        transformations: Transforma√ß√µes opcionais para URLs

    Returns:
        str: JSON formatado
    """
    data = []
    for r in resources:
        data.append({
            'public_id': r['public_id'],
            'format': r.get('format'),
            'width': r.get('width'),
            'height': r.get('height'),
            'bytes': r.get('bytes'),
            'created_at': r.get('created_at'),
            'url': build_url(r, transformations),
            'secure_url': build_url(r, transformations),
        })
    return json.dumps(data, indent=2, ensure_ascii=False)


def save_output(content, title):
    """
    Salva a sa√≠da em um arquivo JSON

    Args:
        content: Conte√∫do JSON
        title: T√≠tulo para o nome do arquivo

    Returns:
        Path: Caminho do arquivo salvo
    """
    # Criar diret√≥rio de sa√≠da se n√£o existir
    output_dir = Path(OUTPUT_DIR)
    output_dir.mkdir(exist_ok=True)

    # Nome do arquivo: {title}_urls.json
    filename = f"{title}_urls.json"
    filepath = output_dir / filename

    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)

    return filepath


def get_user_input():
    """
    Solicita input do usu√°rio para pasta e t√≠tulo

    Returns:
        tuple: (folder_path, title)
    """
    print("=" * 70)
    print("‚òÅÔ∏è  CLOUDINARY URL EXTRACTOR")
    print("=" * 70)
    print()

    # Solicitar pasta
    print("üìÇ Digite o caminho da pasta no Cloudinary:")
    print("   Exemplos: cs/gloves, cs/ak-47, pokemons, themes")
    print()
    folder_path = input("   Pasta: ").strip()

    print()

    # Solicitar t√≠tulo
    print("üìù Digite o t√≠tulo para o arquivo de sa√≠da:")
    print("   Exemplos: gloves, ak47, pokemon_gen1")
    print()
    title = input("   T√≠tulo: ").strip()

    # Validar inputs
    if not folder_path:
        print()
        print("‚ö†Ô∏è  Aten√ß√£o: Pasta vazia, buscando em todas as pastas...")
        folder_path = ''

    if not title:
        print()
        print("‚ùå Erro: T√≠tulo n√£o pode ser vazio!")
        sys.exit(1)

    return folder_path, title


def main():
    # Obter inputs do usu√°rio
    folder_path, title = get_user_input()

    print()
    print("=" * 70)
    print("üöÄ INICIANDO EXTRA√á√ÉO")
    print("=" * 70)
    print()

    # Configurar Cloudinary
    configure_cloudinary()
    print()

    # Buscar recursos
    resources = get_all_resources(
        folder=folder_path,
        resource_type=RESOURCE_TYPE,
        max_results=None
    )

    if not resources:
        print()
        print("‚ö†Ô∏è  Nenhum recurso encontrado!")
        print()
        print(f"Verifique se:")
        print(f"   - A pasta '{folder_path}' existe no Cloudinary")
        print(f"   - O tipo de recurso '{RESOURCE_TYPE}' est√° correto")
        print(f"   - As credenciais t√™m permiss√£o de leitura")
        return

    print()
    print(f"üì¶ Total de recursos encontrados: {len(resources)}")

    print()
    print("=" * 70)
    print(f"üìä RESUMO")
    print("=" * 70)
    print(f"‚úÖ Total de recursos: {len(resources)}")
    print(f"üìÅ Pasta: {folder_path or 'ROOT (todas)'}")
    print(f"üìÇ Tipo: {RESOURCE_TYPE}")

    # Formatar sa√≠da
    print()
    print(f"üìù Gerando sa√≠da em formato JSON...")
    output = format_json_output(resources, transformations=None)

    # Salvar em arquivo
    filepath = save_output(output, title)
    print(f"üíæ Salvo em: {filepath.absolute()}")

    # Mostrar preview
    print()
    print("=" * 70)
    print(f"üìã PREVIEW (primeiros 10 recursos)")
    print("=" * 70)
    for i, resource in enumerate(resources[:10], 1):
        url = build_url(resource, None)
        print(f"{i}. {resource['public_id']}")
        print(f"   {url}")

    if len(resources) > 10:
        print(f"... e mais {len(resources) - 10} recursos")

    print()
    print("üéâ Conclu√≠do!")
    print()

    return resources


if __name__ == '__main__':
    try:
        resources = main()
    except KeyboardInterrupt:
        print()
        print("‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        print()
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

#!/usr/bin/env python
"""
Script para processar naruto_urls e criar dois arquivos:
- naruto_characters.json: Personagens de Naruto e Naruto Shippuden
- boruto_characters.json: Personagens novos de Boruto

Estrutura de cada personagem:
{
    "name": "Nome do personagem",
    "picture": "URL da imagem",
    "similar_characters": ["personagem1", "personagem2", "personagem3"]
}
"""

import json
import re
from pathlib import Path

# Personagens novos de Boruto (introduzidos apenas em Boruto)
BORUTO_EXCLUSIVE_CHARACTERS = {
    '„Ç®„Ç§„ÉÄ', 'Eida', 'Ada',  # Eida/Ada
    '„Ç¢„Éû„Éâ', 'Amado',  # Amado
    '„Éú„É´„Éà', 'Boruto',  # Boruto Uzumaki
    '„Çµ„É©„ÉÄ', 'Sarada',  # Sarada Uchiha
    '„Éü„ÉÑ„Ç≠', 'Mitsuki',  # Mitsuki (new generation)
    '„Ç∑„Ç´„ÉÄ„Ç§', 'Shikadai',  # Shikadai Nara
    '„ÉÅ„Éß„Ç¶„ÉÅ„Éß„Ç¶', 'Chocho', 'Ch≈çch≈ç',  # Chocho Akimichi
    '„ÅÑ„ÅÆ„Åò„Çì', 'Inojin',  # Inojin Yamanaka
    '„É°„Çø„É´', 'Metal',  # Metal Lee
    '„Ç§„ÉØ„Éô„Ç®', 'Iwabee',  # Iwabee Yuino
    '„Éá„É≥„Ç≠', 'Denki',  # Denki Kaminarimon
    '„Åô„Åø„Çå', 'Sumire',  # Sumire Kakei
    '„Çè„Åï„Å≥', 'Wasabi',  # Wasabi Izuno
    '„Å™„Åø„Å†', 'Namida',  # Namida Suzumeno
    '„Ç´„ÉØ„Ç≠', 'Kawaki',  # Kawaki
    '„Éá„É´„Çø', 'Delta',  # Delta
    '„Ç≥„Éº„Éâ', 'Code',  # Code
    '„Ç∏„Ç≤„É≥', 'Jigen',  # Jigen
    '„Éì„ÇØ„Çø„Éº', 'Victor',  # Victor
    '„Éá„Ç£„Éº„Éë', 'Deepa',  # Deepa
    '„Ç´„Ç∑„É≥', 'Kashin',  # Kashin Koji
    '„Ç§„ÉÉ„Ç∑„Ç≠', 'Isshiki',  # Isshiki Otsutsuki
    '„É¢„É¢„Ç∑„Ç≠', 'Momoshiki',  # Momoshiki (if only in Boruto)
    '„Ç≠„É≥„Ç∑„Ç≠', 'Kinshiki',  # Kinshiki
    '„Ç¶„É©„Ç∑„Ç≠', 'Urashiki',  # Urashiki
    'Shinki',  # Shinki
    'Araya',  # Araya
    'Yodo',  # Yodo
    'Houki',  # Houki Taketori
    'Hako',  # Hako Kuroi
    'Renga',  # Renga Kokubou
}

def is_boruto_character(name):
    """Verifica se o personagem √© exclusivo de Boruto"""
    name_lower = name.lower()

    # Verificar se cont√©m algum nome de personagem de Boruto
    for boruto_char in BORUTO_EXCLUSIVE_CHARACTERS:
        if boruto_char.lower() in name_lower:
            return True

    return False

def clean_name(name):
    """Limpa o nome do personagem"""
    # Remover \n
    name = name.strip()

    # Se nome vazio, retornar None
    if not name:
        return None

    return name

def load_characters(file_path):
    """Carrega os personagens do arquivo JSON"""
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    return data

def filter_characters(characters):
    """
    Filtra personagens:
    - Remove entradas com picture = default.jpg
    - Remove entradas com nome vazio
    - Separa entre Naruto e Boruto
    """
    naruto_chars = []
    boruto_chars = []

    seen_names = set()  # Para evitar duplicatas

    for char in characters:
        name = clean_name(char.get('name', ''))
        picture = char.get('picture', '')

        # Ignorar se nome vazio
        if not name:
            continue

        # Ignorar se picture √© default.jpg
        if picture == 'default.jpg':
            continue

        # Ignorar se j√° vimos este nome
        if name in seen_names:
            continue

        seen_names.add(name)

        char_data = {
            'name': name,
            'picture': picture
        }

        # Classificar entre Naruto e Boruto
        if is_boruto_character(name):
            boruto_chars.append(char_data)
        else:
            naruto_chars.append(char_data)

    return naruto_chars, boruto_chars

def find_similar_characters(char_name, all_characters, count=3):
    """
    Encontra personagens similares para criar alternativas no quiz

    Crit√©rios de similaridade:
    - Mesma primeira letra
    - Tamanho de nome similar
    - N√£o incluir o pr√≥prio personagem
    """
    similar = []

    char_first_letter = char_name[0].lower() if char_name else ''
    char_length = len(char_name)

    # Criar lista de candidatos com score de similaridade
    candidates = []

    for other_char in all_characters:
        other_name = other_char['name']

        # N√£o incluir o pr√≥prio personagem
        if other_name == char_name:
            continue

        score = 0

        # +2 pontos se come√ßa com mesma letra
        if other_name and other_name[0].lower() == char_first_letter:
            score += 2

        # +1 ponto se tamanho similar (diferen√ßa <= 3)
        if abs(len(other_name) - char_length) <= 3:
            score += 1

        candidates.append({
            'name': other_name,
            'score': score
        })

    # Ordenar por score (maior primeiro) e pegar os top 'count'
    candidates.sort(key=lambda x: x['score'], reverse=True)
    similar = [c['name'] for c in candidates[:count]]

    # Se n√£o encontrou suficientes, pegar aleat√≥rios
    if len(similar) < count:
        remaining = [c['name'] for c in candidates[len(similar):]]
        import random
        random.shuffle(remaining)
        similar.extend(remaining[:count - len(similar)])

    return similar[:count]

def create_quiz_structure(characters):
    """
    Cria a estrutura de quiz com similar_characters
    """
    quiz_data = []

    for i, char in enumerate(characters):
        similar = find_similar_characters(char['name'], characters, count=3)

        quiz_char = {
            'name': char['name'],
            'picture': char['picture'],
            'similar_characters': similar
        }

        quiz_data.append(quiz_char)

        # Progress
        if (i + 1) % 100 == 0:
            print(f"   Processados: {i + 1}/{len(characters)}")

    return quiz_data

def main():
    print("=" * 70)
    print("üìä PROCESSANDO PERSONAGENS DE NARUTO")
    print("=" * 70)
    print()

    # Carregar dados
    print("üìÇ Carregando naruto_urls...")
    characters = load_characters('naruto_urls')
    print(f"   ‚úÖ {len(characters)} entradas carregadas")
    print()

    # Filtrar e separar
    print("üîç Filtrando e separando personagens...")
    naruto_chars, boruto_chars = filter_characters(characters)
    print(f"   ‚úÖ Naruto/Shippuden: {len(naruto_chars)} personagens")
    print(f"   ‚úÖ Boruto exclusivos: {len(boruto_chars)} personagens")
    print()

    # Criar estrutura de quiz para Naruto
    print("üéÆ Criando estrutura de quiz para Naruto/Shippuden...")
    naruto_quiz = create_quiz_structure(naruto_chars)
    print(f"   ‚úÖ {len(naruto_quiz)} personagens processados")
    print()

    # Criar estrutura de quiz para Boruto
    print("üéÆ Criando estrutura de quiz para Boruto...")
    boruto_quiz = create_quiz_structure(boruto_chars)
    print(f"   ‚úÖ {len(boruto_quiz)} personagens processados")
    print()

    # Salvar arquivos
    print("üíæ Salvando arquivos...")

    # naruto_characters.json
    with open('naruto_characters.json', 'w', encoding='utf-8') as f:
        json.dump(naruto_quiz, f, indent=2, ensure_ascii=False)
    print(f"   ‚úÖ naruto_characters.json ({len(naruto_quiz)} personagens)")

    # boruto_characters.json
    with open('boruto_characters.json', 'w', encoding='utf-8') as f:
        json.dump(boruto_quiz, f, indent=2, ensure_ascii=False)
    print(f"   ‚úÖ boruto_characters.json ({len(boruto_quiz)} personagens)")

    print()
    print("=" * 70)
    print("üìä RESUMO")
    print("=" * 70)
    print(f"Total original: {len(characters)} entradas")
    print(f"Naruto/Shippuden: {len(naruto_quiz)} personagens")
    print(f"Boruto: {len(boruto_quiz)} personagens")
    print()

    # Preview
    print("=" * 70)
    print("üìã PREVIEW - Naruto (5 primeiros)")
    print("=" * 70)
    for char in naruto_quiz[:5]:
        print(f"‚Ä¢ {char['name']}")
        print(f"  Similares: {', '.join(char['similar_characters'])}")

    print()
    print("=" * 70)
    print("üìã PREVIEW - Boruto (5 primeiros)")
    print("=" * 70)
    for char in boruto_quiz[:5]:
        print(f"‚Ä¢ {char['name']}")
        print(f"  Similares: {', '.join(char['similar_characters'])}")

    print()
    print("üéâ Conclu√≠do!")
    print()

if __name__ == '__main__':
    main()
